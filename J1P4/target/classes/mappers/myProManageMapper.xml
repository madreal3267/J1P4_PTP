<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.itwillbs.mapper.MyProManageMapper">
  	 
 	<!--  시간정보 조회  -->
	<select id="getTime" resultType="string"> 
		select now() 
	</select>
  
    <!-- 관심 프로젝트 정보 조회 -->
    <select id="interestProjectList" resultType="com.itwillbs.domain.ProjectDTO">
     	select p.proj_title, p.proj_cost, p.work_period, p.work_field, 
     		   r.region, r.district, s.skill_nm, p.reg_date, f.free_no, p.proj_no, p.proj_status
     	from project p 
    	join bookmark b on p.proj_no = b.proj_no
    	join freelancer f on b.free_no = f.free_no
    	left join skill s on s.proj_no = b.proj_no
    	left join region r on r.proj_no = b.proj_no
    	where f.free_id=#{user_id}
    </select>  
    
    <!-- 제안받은 프로젝트 정보 조회 -->
	<select id="proposedProjectList" resultType="com.itwillbs.domain.ProjectDTO">
     	select p.proj_title, p.proj_cost, p.work_period, p.work_field, 
     		   r.region, r.district, s.skill_nm, p.reg_date, f.free_no, p.proj_no
        from project p
		join offer_mgmt o on p.proj_no = o.proj_no 
		join freelancer f on f.free_no = o.free_no  
    	left join skill s on s.proj_no = o.proj_no
    	left join region r on r.proj_no = o.proj_no        
		where f.free_id = #{user_id}
	</select>    

	<!-- 지원 중 프로젝트 정보 조회-->
	<select id="applyingProjectList" resultType="com.itwillbs.domain.ProjectDTO">
     	select p.proj_title, p.proj_cost, p.work_period, p.work_field, 
     		   r.region, r.district, s.skill_nm, p.reg_date, f.free_no, p.proj_no, a.meeting_dt, a.meeting_pc, a.meetingOK
        from project p
		join apply_mgmt a on p.proj_no = a.proj_no 
		join freelancer f on f.free_no = a.free_no  
    	left join skill s on s.proj_no = a.proj_no
    	left join region r on r.proj_no = a.proj_no        
		where f.free_id = #{user_id}
	</select>
	
	<!-- 지원중 프로젝트 - 지원취소하기 -->
	<delete id="deleteApply">
		delete from apply_mgmt
		where free_no=#{free_no} and proj_no=#{proj_no}
	</delete>

	<!-- 지원중 프로젝트 - 제안동의 -->
	 <update id="agreeContract">
		update apply_mgmt
		set meeting_dt=#{meeting_dt}, meeting_pc=#{meeting_pc}, meetingOK=1
		where proj_no=#{proj_no} and free_no=#{free_no}	 	
	 </update>
	 
	<!-- 지원 종료 프로젝트 정보 조회 -->
	<select id="endApplyProjectList" resultType="com.itwillbs.domain.ProjectDTO">	
     	select p.proj_title, p.proj_cost, p.work_period, p.work_field, 
     		   r.region, r.district, s.skill_nm, p.reg_date, f.free_no, p.proj_no, p.deadline, a.reject_check
		from project p 
		join apply_mgmt a on p.proj_no = a.proj_no
		join freelancer f on f.free_no = a.free_no
		left join skill s on s.proj_no = a.proj_no
    	left join region r on r.proj_no = a.proj_no 
		where (now() > p.deadline or a.reject_check = 1) and f.free_id = #{user_id}
		<!-- where NOW() > STR_TO_DATE(p.deadline, '%Y-%m-%d %H:%i:%s') AND f.free_id = 'freeTest'; -->
	</select>
	
	<!-- 계약 진행중 -->
	<select id="contractProjectList" resultType="com.itwillbs.domain.ProjectDTO">		
		select p.proj_no, p.proj_title, c.ct_id, m.manager_nm, p.proj_status
		from project p 
		join client c on c.ct_no = p.ct_no
		join apply_mgmt a on a.proj_no = p.proj_no
		join freelancer f on a.free_no = f.free_no
		left join settlement s on s.proj_no = p.proj_no
		left join manager m on s.manager_no = m.manager_no
		where p.proj_status = '계약' and f.free_id = #{user_id}
	</select>	
	
	<!-- 프로젝트 진행중 -->
	<select id="ongoingProjectList" resultType="com.itwillbs.domain.ProjectDTO">		
		select p.proj_no, p.proj_title, c.ct_id, m.manager_nm, p.proj_status, s.price_check
		from project p 
		join client c on c.ct_no = p.ct_no
		join apply_mgmt a on a.proj_no = p.proj_no
		join freelancer f on a.free_no = f.free_no
		left join settlement s on s.proj_no = p.proj_no
		left join manager m on s.manager_no = m.manager_no
		where (p.proj_status = '계약' or p.proj_status = '진행 중') and f.free_id = #{user_id}
	</select>

	<!-- 평가 대기중 프로젝트 목록 -->
	<select id="evProjList" resultType="com.itwillbs.domain.EvaluateProjectDTO">
		<!-- select * from project -->
		select p.proj_title, p.proj_no, f.free_no, c.ct_no, c.ct_id, p.mod_date 
		from project p
		join client c on c.ct_no = p.ct_no
		join apply_mgmt a on p.proj_no = a.proj_no  
		join freelancer f on f.free_no = a.free_no
		where p.proj_status ='완료' and f.free_id= #{user_id}
	</select>	
	
	<!-- 평가 대기중 - 평가하기 -->
	<insert id="evaluate">
		insert into project_value (valuing_free,proj_no,valued_ct,score,content)
		values(#{free_no},#{proj_no},#{ct_no},#{score},#{content})
	</insert>
	
	<!-- 프로젝트 평가 여부 체크 -->
	<select id="checkEvaluate" resultType="int">
	    SELECT COUNT(*) > 0 
	    FROM project_value
	    WHERE proj_no = #{proj_no} and valuing_free = #{free_no}
	</select>
	
	<!-- 완료한 프로젝트 -->
	<select id="completedProjectList" resultType="com.itwillbs.domain.EvaluateProjectDTO">
		<!-- select * from project -->
		select p.proj_title, pv.proj_no, f.free_no, pv.valued_ct, c.ct_id, p.mod_date, pv.score, pv.content
		from project_value pv
		join project p on p.proj_no = pv.proj_no
		join client c on p.ct_no = c.ct_no
		join freelancer f on f.free_no = pv.valuing_free 
		where p.proj_status ='완료' and f.free_id=#{user_id}		
	</select>
	
	<!-- 완료한 프로젝트 - 프로젝트 평가 수정하기 -->
	<update id="updateEvaluate">
		update project_value 
		set score=#{score}, content=#{content}
		where valuing_free=#{free_no} and proj_no=#{proj_no}
	</update>
	
	<!-- 클라이언트 내 프로젝트 관리 -->
	<!-- 관심 프리랜서 시작 -->
	<select id="freeInfo" resultType="com.itwillbs.domain.freeInfoDTO">
		SELECT u.user_id, u.name, f.work_field, f.school_type, r.region, r.district, f.oneline_bio, f.free_no,
		       MAX(TRUNCATE(DATEDIFF(NOW(), c.join_date) / 365, 0) + 1) AS yeoncha,
		       GROUP_CONCAT(DISTINCT s.skill_nm SEPARATOR ', ') AS skills,
		       CASE
		           WHEN FIND_IN_SET('시니어', GROUP_CONCAT(DISTINCT c.job_lev)) > 0 THEN '시니어'
		           WHEN FIND_IN_SET('미들', GROUP_CONCAT(DISTINCT c.job_lev)) > 0 THEN '미들'
		           WHEN FIND_IN_SET('주니어', GROUP_CONCAT(DISTINCT c.job_lev)) > 0 THEN '주니어'
		           ELSE NULL
		       END AS job_level,
		       count(c.free_no) AS career_count,
		       count(p.free_no) AS portfolio_count
		FROM freelancer f
		JOIN user u ON u.user_id = f.free_id
		left JOIN career c ON c.free_no = f.free_no
		left JOIN region r ON r.free_no = f.free_no
		left JOIN skill s ON s.free_no = f.free_no
		left join portfolio p on p.free_no = f.free_no
		join bookmark b on b.free_no = f.free_no
		JOIN client ct ON ct.ct_no = b.ct_no
		WHERE ct.ct_id = #{user_id}
		GROUP BY u.user_id, u.name, f.work_field, f.school_type, r.region, r.district, f.oneline_bio, f.free_no;
	</select>
		
	
	<!-- 제안한 프리랜서 -->
	<select id="proposeFreelancerList" resultType="com.itwillbs.domain.proposeFreeDTO">
		SELECT p.proj_title, u.name, f.free_no, p.proj_no,
		    COALESCE(GROUP_CONCAT(DISTINCT s.skill_nm SEPARATOR ' | '), 'No Skills') AS skills, 
		    COALESCE(MAX(TRUNCATE(DATEDIFF(NOW(), c.join_date) / 365, 0) + 1), 0) AS yeoncha, 
		    CASE 
		        WHEN MAX(a.proj_no = p.proj_no AND a.free_no = f.free_no) = 1 THEN 'Y' 
		        ELSE 'N' 
		    END AS apply_YN
		FROM freelancer f 
		JOIN offer_mgmt o ON o.free_no = f.free_no 
		JOIN project p ON p.proj_no = o.proj_no
		JOIN client ct ON ct.ct_no = p.ct_no
		JOIN user u ON u.user_id = f.free_id 
		LEFT JOIN skill s ON s.free_no = f.free_no 
		LEFT JOIN career c ON c.free_no = f.free_no
		LEFT JOIN apply_mgmt a ON p.proj_no = a.proj_no AND a.free_no = f.free_no
		WHERE ct.ct_id = #{user_id}
		GROUP BY p.proj_title, u.name, p.proj_no, f.free_no
		ORDER BY p.proj_no
	</select>
	
	<!-- 검수중 프로젝트-->
	<select id="underReviewProjectList" resultType="com.itwillbs.domain.ProjectVO">
		select p.proj_title, p.reg_date, p.deadline, p.proj_status, p.proj_no
		from project p 
		join client c on c.ct_no = p.ct_no
		where p.proj_status = '검수 단계' and c.ct_id = #{user_id}
		order by p.proj_no
	</select>	
	
	<!-- 프로젝트 삭제하기 -->
	<delete id="del1">delete from apply_mgmt where proj_no = #{proj_no}</delete>
	<delete id="del2">delete from bookmark where proj_no = #{proj_no}</delete>
	<delete id="del3">delete from offer_mgmt where proj_no = #{proj_no}</delete>
	<delete id="del4">delete from project_value where proj_no = #{proj_no}</delete>
	<delete id="del5">delete from region where proj_no = #{proj_no}</delete>
	<delete id="del6">delete from settlement where proj_no = #{proj_no}</delete>
	<delete id="del7">delete from skill where proj_no = #{proj_no}</delete>
	
	<delete id="deleteProject">
		delete from project where proj_no=#{proj_no}
	</delete>
	
	<!-- 임시저장 프로젝트 -->
	<select id="temSaveProjectList" resultType="com.itwillbs.domain.ProjectVO">
		select p.*
		from project p 
		join client c on c.ct_no = p.ct_no
		where p.temporary = '임시저장' and c.ct_id = #{user_id}
	</select>	
	
	<!-- 등록실패 프로젝트 -->
	<select id="regFailedProjectList" resultType="com.itwillbs.domain.ProjectVO">
		select p.*
		from project p 
		join client c on c.ct_no = p.ct_no
		where p.proj_status = '반려' and c.ct_id = #{user_id}
	</select>	
	
	<!-- 지원자 모집중 프로젝트 -->
	<select id="rpl" resultType="com.itwillbs.domain.proposeFreeDTO">
	SELECT p.proj_title, u.name, f.free_id, p.proj_no, f.free_no, meeting_dt, meeting_pc, meetingOK,
	COALESCE(GROUP_CONCAT(DISTINCT s.skill_nm SEPARATOR ' | '), 'No Skills') AS skills,
	COALESCE(MAX(TRUNCATE(DATEDIFF(NOW(), c.join_date) / 365, 0) + 1), 0) AS yeoncha, 
	CASE WHEN MAX(a.proj_no = p.proj_no AND a.free_no = f.free_no) = 1 THEN 'Y' ELSE 'N' END AS apply_YN 
	FROM project p 
	JOIN client ct ON ct.ct_no = p.ct_no 
	LEFT JOIN apply_mgmt a ON p.proj_no = a.proj_no 
	JOIN freelancer f ON f.free_no = a.free_no 
	JOIN user u ON u.user_id = f.free_id 
	LEFT JOIN skill s ON s.free_no = f.free_no 
	LEFT JOIN career c ON c.free_no = f.free_no 
	WHERE p.proj_status = '모집중' AND (a.reject_check = 0 OR a.reject_check IS NULL) AND ct.ct_id = #{user_id}
	GROUP BY p.proj_title, u.name, f.free_id, p.proj_no, f.free_no, meeting_dt, meeting_pc, meetingOK
	ORDER BY p.proj_title
	</select>
	
	<!-- 계약 진행중 프로젝트 -->
	<select id="ctContractProjectList" resultType="com.itwillbs.domain.ctOngoingProjectDTO">
		select p.proj_no, p.proj_title, m.manager_nm, p.proj_status
		from project p 
		join client c on p.ct_no = c.ct_no
		left join settlement s on s.proj_no = p.proj_no
		left join manager m on s.manager_no = m.manager_no
		where p.proj_status = '계약' and c.ct_id = #{user_id}
	</select>	
	
	<!-- 프로젝트 진행중 목록 조회-->
	<select id="ctOngoingProjectList" resultType="com.itwillbs.domain.ctOngoingProjectDTO">
		select p.proj_no, p.proj_title, m.manager_nm, p.proj_status, p.proj_cost, c.ct_no, m.manager_no, a.free_no 
		from project p 
		join client c on p.ct_no = c.ct_no
		join apply_mgmt a on a.proj_no = p.proj_no
		left join settlement s on s.proj_no = p.proj_no
		left join manager m on s.manager_no = m.manager_no
		where (p.proj_status = '진행 중' or p.proj_status = '계약')and c.ct_id = #{user_id}
	</select>	
	
	<!-- 프로젝트 진행중 - 결제하기 -->
	<update id="payment">
		update settlement
		set price = cast(#{proj_cost} as unsigned), price_check = 1
		where proj_no = #{proj_no}
	
		update project
		set proj_cost=#{proj_cost},  pay_check=1
		where proj_no = #{proj_no}
	
	</update>
	
	
	
	<!-- 평가대기중 프리랜서 목록 조회-->
	<select id="waitEvaluationFreelancerList" resultType="com.itwillbs.domain.EvaluateFreelancerDTO">
		select u.name, p.proj_title, p.mod_date, f.free_no, c.ct_no, p.proj_no
		from project p
		join client c on c.ct_no = p.ct_no
		join apply_mgmt a on a.proj_no = p.proj_no
		join freelancer f on f.free_no = a.free_no
		join user u on u.user_id = f.free_id
		where p.proj_status = '완료' and c.ct_id = #{user_id}
	</select>

	<!-- 프리랜서 평가 여부 체크 -->
	<select id="checkFreeEvaluate" resultType="int">
	    SELECT COUNT(*) > 0
	    FROM freelancer_value
	    WHERE valuing_ct = #{ct_no} and valued_free = #{free_no};
	</select>	
	
	<!-- 평가 대기중 프리랜서 - 평가하기 -->
	<insert id="evaluateFree">
	insert into freelancer_value (valued_free,valuing_ct,proj_no,score,content)
	values(#{free_no},#{ct_no},#{proj_no},#{score},#{content})
	</insert>
	
	<!-- 완료한 프로젝트 평가완료 프리랜서 -->
	<select id="completedProjectFreeList" resultType="com.itwillbs.domain.EvaluateFreelancerDTO">
		select u.name, p.proj_title, fv.score, fv.content, f.free_no, c.ct_no, p.proj_no
		from freelancer_value fv
		join freelancer f on fv.valued_free = f.free_no
		join user u on f.free_id = u.user_id
		join project p on fv.valuing_ct = p.ct_no and fv.proj_no = p.proj_no 
		join client c on fv.valuing_ct = c.ct_no
		where p.proj_status ='완료' and c.ct_id = #{user_id}
	</select>

	<!-- 완료한 프로젝트 - 프리랜서 평가 수정하기 -->
	<update id="updateEvaluateFree">
		update freelancer_value 
		set score=#{score}, content=#{content}
		where valued_free=#{free_no} and valuing_ct=#{ct_no} and proj_no=#{proj_no}
	</update>

	<!-- 지원자 모집중 프로젝트 - 지원거절 -->
	<update id="rejectApply">
		update apply_mgmt
		set reject_check=1
		where proj_no=#{proj_no} and free_no=#{free_no}
	</update>
	
	<!-- 지원자 모집중 프로젝트 - 계약 제안 -->
	<update id="offerContract">
		update apply_mgmt
		set meeting_dt=#{meeting_dt}, meeting_pc=#{meeting_pc}
		where proj_no=#{proj_no} and free_no=#{free_no}
	</update>
	
	<!-- 지원자 모집중 프로젝트 - 모집 완료 -->
	<update id="recruitmentCompleted">
		update project
		set proj_status = '계약'
		where proj_no=#{proj_no}	
	</update>
	
	<!-- 진행중 프로젝트 - 완료하기(정산요청) -->
	<update id="requestSettlement">
		update settlement
		set settlement_requested = 1
		where proj_no=#{proj_no} and free_no=#{free_no}
	</update>

	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
  </mapper>