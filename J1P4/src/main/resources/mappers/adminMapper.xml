<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.itwillbs.mapper.AdminMapper">
  	 
  	 <!-- 메인 페이지 count -->
		<select id="getUserCount" resultType="int">
    	 SELECT count(*) FROM (
            SELECT 
                f.free_no AS no, 
                f.free_id AS id, 
                u.name, 
                u.user_type, 
                u.reg_date,
                'freelancer' AS role
            FROM freelancer f
            JOIN user u ON f.free_id = u.user_id
            UNION ALL
            SELECT 
                c.ct_no AS no, 
                c.ct_id AS id, 
                u.name, 
                u.user_type, 
                u.reg_date,
                'client' AS role
            FROM client c
            JOIN user u ON c.ct_id = u.user_id
        ) AS all_users
  		</select>  	 
  	 	<select id="getFreelancerCount" resultType="int">
	    SELECT 
            count(*)
        FROM freelancer f
        JOIN user u ON f.free_id = u.user_id
	  	</select>
	
	  	<select id="getClientCount" resultType="int">
	    SELECT 
            count(*)
        FROM client c
        JOIN user u ON c.ct_id = u.user_id
	  	</select>
	  	
  	 	<select id="getProjectCount" resultType="int">
    	SELECT COUNT(*) FROM project
  		</select>
  		
  		<select id="getProjectStatusCounts" resultType="map">
    	SELECT proj_status, COUNT(*) as count
    	FROM project
    	GROUP BY proj_status
  		</select>
  		
  		<select id="getManagerCount" resultType="int">
    	SELECT COUNT(*) FROM manager
  		</select>
  		
  		<select id="getUnapprovedManagerCount" resultType="int">
    	SELECT COUNT(*) FROM manager WHERE approved = 0
  		</select>
  		
  	 <!-- 메인 페이지 count -->
  	 
  	 <!-- 공지사항 -->
		<insert id="insertAnnouncement" parameterType="com.itwillbs.dto.AnnouncementDTO">
        INSERT INTO announcement (title, content, manager_id, created_at)
        VALUES (#{title}, #{content}, #{manager_id}, NOW())
	    </insert>
	
	    <select id="getAllAnnouncements" resultType="com.itwillbs.dto.AnnouncementDTO">
	        SELECT * FROM announcement
	    </select>
	
	    <select id="getAnnouncementById" parameterType="int" resultType="com.itwillbs.dto.AnnouncementDTO">
	        SELECT * FROM announcement WHERE announcement_id = #{announcementId}
	    </select>
		
		<select id="getLatestNotices" resultType="com.itwillbs.dto.AnnouncementDTO">
		    SELECT * FROM announcement ORDER BY created_at DESC LIMIT #{limit}
		</select>
		
  	 <!-- 공지사항 -->
  	 
  	 <!-- 회원정보 관리 -->
  	 
<!--   	 <select id="getAllUsers" resultType="com.itwillbs.dto.UserDTO"> -->
<!--         SELECT  -->
<!--             f.free_no AS no,  -->
<!--             f.free_id AS id,  -->
<!--             u.name,  -->
<!--             u.user_type,  -->
<!--             u.reg_date, -->
<!--             'freelancer' AS role -->
<!--         FROM freelancer f -->
<!--         JOIN user u ON f.free_id = u.user_id -->
<!--         UNION ALL -->
<!--         SELECT  -->
<!--             c.ct_no AS no,  -->
<!--             c.ct_id AS id,  -->
<!--             u.name,  -->
<!--             u.user_type,  -->
<!--             u.reg_date, -->
<!--             'client' AS role -->
<!--         FROM client c -->
<!--         JOIN user u ON c.ct_id = u.user_id -->
<!--     </select> -->
	  <select id="getAllUsers" resultType="com.itwillbs.dto.UserDTO">
        SELECT * FROM (
            SELECT 
                f.free_no AS no, 
                f.free_id AS id, 
                u.name, 
                u.user_type, 
                u.reg_date,
                'freelancer' AS role
            FROM freelancer f
            JOIN user u ON f.free_id = u.user_id
            UNION ALL
            SELECT 
                c.ct_no AS no, 
                c.ct_id AS id, 
                u.name, 
                u.user_type, 
                u.reg_date,
                'client' AS role
            FROM client c
            JOIN user u ON c.ct_id = u.user_id
        ) AS all_users
        ORDER BY all_users.reg_date DESC
    </select>

    <select id="getFreelancers" resultType="com.itwillbs.dto.UserDTO">
        SELECT 
            f.free_no AS no, 
            f.free_id AS id, 
            u.name, 
            u.user_type, 
            u.reg_date,
            'freelancer' AS role
        FROM freelancer f
        JOIN user u ON f.free_id = u.user_id
        ORDER BY u.reg_date DESC
    </select>

    <select id="getClients" resultType="com.itwillbs.dto.UserDTO">
        SELECT 
            c.ct_no AS no, 
            c.ct_id AS id, 
            u.name, 
            u.user_type, 
            u.reg_date,
            'client' AS role
        FROM client c
        JOIN user u ON c.ct_id = u.user_id
        ORDER BY u.reg_date DESC
    </select>
    
    <!-- 클라이언트 ID를 가져오는 쿼리 -->
    <select id="getClientIdByCtNo" parameterType="int" resultType="String">
        SELECT ct_id FROM client WHERE ct_no = #{ct_no}
    </select>

    <!-- 프리랜서 ID를 가져오는 쿼리 -->
    <select id="getFreelancerIdByFreeNo" parameterType="int" resultType="String">
        SELECT free_id FROM freelancer WHERE free_no = #{free_no}
    </select>
    
  	 <!-- 회원정보 관리 -->
  	 
  	 <!-- 프로젝트 관리 -->
  	 <select id="getProjectsByStatus" resultType="com.itwillbs.dto.ProjectDTO">
        SELECT p.proj_no, p.proj_title, c.ct_id, p.reg_date, p.work_period, p.proj_status
        FROM project p
        JOIN client c ON p.ct_no = c.ct_no
        WHERE p.proj_status = #{status}
        ORDER BY p.reg_date DESC
    </select>

    <select id="getAllProjects" resultType="com.itwillbs.dto.ProjectDTO">
        SELECT p.proj_no, p.proj_title, c.ct_id, p.reg_date, p.work_period, p.proj_status
        FROM project p
        JOIN client c ON p.ct_no = c.ct_no
        ORDER BY p.reg_date DESC
    </select>

    <update id="updateProjectStatus" parameterType="com.itwillbs.domain.ProjectVO">
        UPDATE project
        SET proj_status = #{proj_status}
        WHERE proj_no = #{proj_no}
    </update>

    <update id="rejectProject" parameterType="com.itwillbs.domain.ProjectVO">
        UPDATE project
        SET proj_status = '반려', reject_reason = #{reject_reason}
        WHERE proj_no = #{proj_no}
    </update>
    
     <select id="getProjectById" parameterType="int" resultType="com.itwillbs.domain.ProjectVO">
        SELECT * FROM project WHERE proj_no = #{proj_no}
    </select>
  	 <!-- 프로젝트 관리 -->
  	 
  	 <!-- 정산 관리 -->
  	 <!-- adminMapper.xml -->

	<!-- 전체 정산 내역 조회 -->
	<select id="getAllSettlements" resultType="com.itwillbs.dto.SettlementDTO">
	    SELECT s.settlement_no, s.proj_no, 
	           CAST(p.proj_cost AS DECIMAL(10, 0)) AS price, 
	           p.pay_check AS price_check, 
	           CAST(s.settled_cost AS DECIMAL(10, 0)) AS settled_cost, 
	           CAST(s.fee AS DECIMAL(10, 0)) AS fee, 
	           s.settlement_check, 
	           s.settlement_requested, 
	           s.merchant_uid,
	           p.proj_title, c.ct_id, f.free_id, u.bank_nm, u.account, u.depositor
	    FROM project p
	    JOIN settlement s ON p.proj_no = s.proj_no
	    JOIN client c ON p.ct_no = c.ct_no
	    JOIN freelancer f ON p.free_no = f.free_no
	    JOIN user u ON f.free_id = u.user_id
	</select>
	
	<!-- 결제 여부에 따른 정산 내역 조회 -->
	<select id="getSettlementsByPriceCheck" parameterType="boolean" resultType="com.itwillbs.dto.SettlementDTO">
	    SELECT s.settlement_no, s.proj_no, 
	           CAST(p.proj_cost AS DECIMAL(10, 0)) AS price, 
	           p.pay_check AS price_check, 
	           CAST(s.settled_cost AS DECIMAL(10, 0)) AS settled_cost, 
	           CAST(s.fee AS DECIMAL(10, 0)) AS fee, 
	           s.settlement_check, 
	           s.settlement_requested, 
	           s.merchant_uid,
	           p.proj_title, c.ct_id, f.free_id, u.bank_nm, u.account, u.depositor
	    FROM project p
	    JOIN settlement s ON p.proj_no = s.proj_no
	    JOIN client c ON p.ct_no = c.ct_no
	    JOIN freelancer f ON p.free_no = f.free_no
	    JOIN user u ON f.free_id = u.user_id
	    WHERE p.pay_check = #{priceCheck}
	</select>
	
	<!-- 정산 여부에 따른 정산 내역 조회 -->
	<select id="getSettlementsBySettlementCheck" parameterType="boolean" resultType="com.itwillbs.dto.SettlementDTO">
	    SELECT s.settlement_no, s.proj_no, 
	           CAST(p.proj_cost AS DECIMAL(10, 0)) AS price, 
	           p.pay_check AS price_check, 
	           CAST(s.settled_cost AS DECIMAL(10, 0)) AS settled_cost, 
	           CAST(s.fee AS DECIMAL(10, 0)) AS fee, 
	           s.settlement_check, 
	           s.settlement_requested, 
	           s.merchant_uid,
	           p.proj_title, c.ct_id, f.free_id, u.bank_nm, u.account, u.depositor
	    FROM project p
	    JOIN settlement s ON p.proj_no = s.proj_no
	    JOIN client c ON p.ct_no = c.ct_no
	    JOIN freelancer f ON p.free_no = f.free_no
	    JOIN user u ON f.free_id = u.user_id
	    WHERE s.settlement_check = #{settlementCheck}
	</select>
	
	<!-- 특정 정산 내역 조회 -->
	<select id="getSettlementById" parameterType="int" resultType="com.itwillbs.dto.SettlementDTO">
	    SELECT s.settlement_no, s.proj_no, 
	           CAST(p.proj_cost AS DECIMAL(10, 0)) AS price, 
	           p.pay_check AS price_check, 
	           CAST(s.settled_cost AS DECIMAL(10, 0)) AS settled_cost, 
	           CAST(s.fee AS DECIMAL(10, 0)) AS fee, 
	           s.settlement_check, 
	           s.settlement_requested, 
	           s.merchant_uid,
	           p.proj_title, c.ct_id, f.free_id, u.bank_nm, u.account, u.depositor
	    FROM project p
	    JOIN settlement s ON p.proj_no = s.proj_no
	    JOIN client c ON p.ct_no = c.ct_no
	    JOIN freelancer f ON p.free_no = f.free_no
	    JOIN user u ON f.free_id = u.user_id
	    WHERE s.settlement_no = #{settlement_no}
	</select>
	
	<!-- 정산 내역 업데이트 -->
	<update id="updateSettlement" parameterType="com.itwillbs.dto.SettlementDTO">
	    UPDATE settlement
	    SET settled_cost = #{settled_cost},
	        fee = #{fee},
	        settlement_check = #{settlement_check},
	        settlement_requested = #{settlement_requested},
	        merchant_uid = #{merchant_uid}
	    WHERE settlement_no = #{settlement_no}
	</update>
	
	<insert id="insertSettlement" parameterType="com.itwillbs.dto.SettlementDTO">
	    INSERT INTO settlement (proj_no, settled_cost, fee, settlement_check, settlement_requested)
	    VALUES (#{proj_no}, #{settled_cost}, #{fee}, #{settlement_check}, #{settlement_requested})
	</insert>


    <!-- 계약서 -->
    <insert id="insertContract" parameterType="com.itwillbs.dto.ContractDTO">
        INSERT INTO contract (proj_no, contract_title, contract_path, upload_date)
        VALUES (#{proj_no}, #{contract_title}, #{contract_path}, #{upload_date})
    </insert>
    
    <!-- 중복여부 체크 -->
    <select id="existsByProjNo" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM contract WHERE proj_no = #{proj_no}
    </select>

    <select id="selectContractById" parameterType="int" resultType="com.itwillbs.dto.ContractDTO">
        SELECT c.contract_no, c.proj_no, c.contract_title, c.contract_path, c.upload_date, 
               p.proj_title, cl.ct_id, f.free_id
        FROM contract c
        JOIN project p ON c.proj_no = p.proj_no
        JOIN client cl ON p.ct_no = cl.ct_no
        JOIN freelancer f ON p.free_no = f.free_no
        WHERE c.contract_no = #{contract_no}
    </select>

    <select id="selectAllContracts" resultType="com.itwillbs.dto.ContractDTO">
        SELECT c.contract_no, c.proj_no, c.contract_title, c.contract_path, c.upload_date, 
               p.proj_title, cl.ct_id, f.free_id
        FROM contract c
        JOIN project p ON c.proj_no = p.proj_no
        JOIN client cl ON p.ct_no = cl.ct_no
        JOIN freelancer f ON p.free_no = f.free_no
    </select>
  	 <!-- 정산 관리 -->
  	 
  	 <!-- 관리자 관리 -->
	<resultMap id="managerResultMap" type="com.itwillbs.dto.ManagerDTO">
	    <id property="manager_no" column="manager_no" />
	    <result property="manager_nm" column="manager_nm" />
	    <result property="manager_call" column="manager_call" />
	    <result property="manager_email" column="manager_email" />
	    <result property="manager_id" column="manager_id" />
	    <result property="manager_pw" column="manager_pw" />
	    <result property="approved" column="approved" />
	</resultMap>
	
	<select id="getManagerById" parameterType="String" resultMap="managerResultMap">
	    SELECT * FROM manager WHERE manager_id = #{manager_id}
	</select>
	
	<update id="approveManager" parameterType="int">
	    UPDATE manager SET approved = TRUE WHERE manager_no = #{manager_no}
	</update>
	
	<select id="getAllManagers" resultMap="managerResultMap">
	    SELECT * FROM manager
	</select>
	
	<insert id="insertManager" parameterType="com.itwillbs.dto.ManagerDTO">
	    INSERT INTO manager (manager_nm, manager_call, manager_email, manager_id, manager_pw, approved)
	    VALUES (#{manager_nm}, #{manager_call}, #{manager_email}, #{manager_id}, #{manager_pw}, FALSE)
	</insert>
	
	<delete id="deleteManager" parameterType="int">
        DELETE FROM manager WHERE manager_no = #{managerNo}
    </delete>
  	 <!-- 관리자 관리 -->
  </mapper>